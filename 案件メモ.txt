signup.php

OK：1.ユーザーは「ユーザー名」「メールアドレス」「パスワード」を入力することができる

OK：2.ユーザーは「プロフィール画像」を選択することができる

OK：3.各種フォームには入力チェック（バリデーション）がある
	OK：・ ユーザー名が空だった場合エラーメッセージが出る
	OK：・ メールアドレスが空だった場合エラーメッセージが出る
	OK：・ パスワードが空だった場合エラーメッセージが出る
	OK：・ パスワードが4文字未満だった場合エラーメッセージが出る
	OK：・ パスワードが16文字より大きい場合エラーメッセージが出る
	OK：・ プロフィール画像が未選択だった場合エラーメッセージが出る
	OK：・ プロフィール画像の拡張子が「jpg」「png」「gif」以外だった場合エラーメッ0セージが出る

4.すべての入力チェックを通過した場合
	OK：・ セッションに入力された情報を保存する
	OK：・ プロフィール画像をprofile_imagesフォルダへアップロード（date関数を使用）
	OK：・ 入力情報確認画面（check.php）へ遷移する
	
未実装
	・ メールアドレス重複チェック
	・ 入力欄の入力内容保持

chck.php
1. ユーザーは入力情報に間違いがないか確認することができる
2. 正規のルートを通らずにcheck.phpへのリクエストが行われた場合はsignup.phpへ強制遷移する
3. 入力情報に間違いがあった場合は戻るボタンを押すことでsignup.phpへ戻ることができる
4. ユーザー登録ボタンを押すことで入力情報をデータベースへ登録する
5. 登録処理完了後、アカウント作成完了ページ(thanks.php)へ遷移する

signin.php

1.ユーザーは登録済み「メールアドレス」と「パスワード」の組み合わせを入力することができる
2.メールアドレスとパスワードが空だった場合のバリデーション（blank）がある
3.入力されたメールアドレスと一致する登録データ1件をデータベースから取得する
4.取得したデータのパスワードと入力されたパスワードをpassword_verify() 
　関数にかけて一致するかを検証する
5.入力されたメールアドレスでデータが取得できないまたはパスワードが一致しない場合の
　バリデーション（failed）がある
6.パスワードが一致した場合はサインイン処理を実行する
　　・サインインアカウントのidを$_SESSION['id']に保存する
　　・header()関数を使ってタイムライン画面へ遷移する

timeline.php

1.ログインしているユーザ名と画像が確認できる
2.ログアウトできる
3.投稿ができる
　　・空チェックのバリデーションがある
4.ユーザーは投稿の全てを見ることができる
　　・各投稿には投稿したユーザ名と画像が表示されている
5.ユーザは投稿にいいねできる
6.編集画面へ移動できる
　　・編集ボタンから詳細画面へ遷移する
7.投稿の削除ができる
8.ページネーションできる
9.いいねした記事だけにフィルタができる

